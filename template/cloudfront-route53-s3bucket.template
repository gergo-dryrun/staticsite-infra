AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates CloudFront distribution with s3 as origin.'

Parameters:
  DomainName:
    Description: FQDN of site
    Type: String
    Default: gergo.me
  AllDomainNames:
    Description: SiteDomain
    Type: CommaDelimitedList
    Default: www.gergo.me,gergo.me
  IpWhitelist:
    Description: CIDR to whitelist for SIT environment
    Type: String
    Default: my-ip/32
  AcmCertArn:
    Description: ARN of ACM Certificate deployed in us-east-1
    Type: String
    Default: arn:

Mappings:
# Mapping from http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region
  RegionMap: 
    sa-east-1:
      endpoint: s3-website-sa-east-1.amazonaws.com
      hostedzoneid: Z7KQH4QJS55SO
    eu-west-2:
      endpoint: s3-website.eu-west-2.amazonaws.com
      hostedzoneid: Z3GKZC51ZF0DB4
    eu-west-1:
      endpoint: s3-website-eu-west-1.amazonaws.com
      hostedzoneid: Z1BKCTXD74EZPE
    eu-central-1:
      endpoint: s3-website.eu-central-1.amazonaws.com
      hostedzoneid: Z21DNDUVLTQW6Q
    ap-northeast-1:
      endpoint: s3-website-ap-northeast-1.amazonaws.com
      hostedzoneid: Z2M4EHUR26P7ZW
    ap-southeast-2:
      endpoint: s3-website-ap-southeast-2.amazonaws.com
      hostedzoneid: Z1WCIGYICN2BYD
    ap-southeast-1:
      endpoint: s3-website-ap-southeast-1.amazonaws.com
      hostedzoneid: Z3O0J2DXBE1FTB
    ap-northeast-2:
      endpoint: s3-website.ap-northeast-2.amazonaws.com
      hostedzoneid: Z3W03O7B5YMIYP
    ap-south-1:
      endpoint: s3-website.ap-south-1.amazonaws.com
      hostedzoneid: Z11RGJOFQNVJUP
    ca-central-1:
      endpoint: s3-website.ca-central-1.amazonaws.com
      hostedzoneid: Z1QDHH18159H29
    us-west-2:
      endpoint: s3-website-us-west-2.amazonaws.com
      hostedzoneid: Z3BJ6K6RIION7M
    us-west-1:
      endpoint: s3-website-us-west-1.amazonaws.com
      hostedzoneid: Z2F56UZL2M1ACD
    us-east-2:
      endpoint: s3-website.us-east-2.amazonaws.com
      hostedzoneid: Z2O1EMRO9K5GLX
    us-east-1:
      endpoint: s3-website-us-east-1.amazonaws.com
      hostedzoneid: Z3AQBSTGFYJSTF
      
Resources:

  CloudFrontOAI:
    Type: Custom::CloudFrontOAI
    DependsOn: LambdaRolePolicies
    Properties:
      ServiceToken: !GetAtt CreateOAI.Arn

  LambdaExecutionerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  LambdaRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: cf-oai-permission
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - cloudfront:*CloudFrontOriginAccess*
            Resource: "*"
          -
            Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource:
              !Sub |-
                arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
          -
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource:
              !Sub |-
                arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/create-cf-origin-access-identity:*
      Roles:
        -
          !Ref LambdaExecutionerRole

  CreateOAI:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: create-cf-origin-access-identity
      Runtime: python2.7
      Handler: create_oai.handler
      Role: !GetAtt LambdaExecutionerRole.Arn
      Timeout: 300
      Environment:
        Variables:
          STACK_NAME: !Ref AWS::StackName
      Code:
        S3Bucket: dryrun.cloud-resources
        S3Key: 2017-04-09-getting-started-static-sites/create_oai.zip

  CfDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - PrdS3Bucket
      - CloudFrontOAI
      - AcmCertificate
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Sub live.${DomainName}.s3.amazonaws.com
          Id: live-s3-origin
          S3OriginConfig:
             OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOAI} #origin-access-identity/cloudfront/E3G6KARSXLIZJA #!Sub
#               - origin-access-identity/cloudfront/${OAI}
#               - OAI: !GetAtt CloudFrontOAI.id
        Enabled: true
        HttpVersion: http2
        # IsIPV6Enabled: true
        # Apparently not yet available
        # Encountered unsupported property IsIPV6Enabled
        Aliases: !Ref AllDomainNames
        DefaultRootObject: index.html
        Comment:
          !Join
            - ' '
            - !Ref AllDomainNames
        DefaultCacheBehavior:
          TargetOriginId: live-s3-origin
          Compress: true
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref AcmCertArn
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only
#          CloudFrontDefaultCertificate: true
##      WebACLId: !Ref WebAcl

  PrdS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub live.${DomainName}
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  LiveBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: CloudFrontOAI
    Properties:
      Bucket: !Sub live.${DomainName}
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::live.${DomainName}/*
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.oai_s3_user_id

  SitS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub sit.${DomainName}
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  SitBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Sub sit.${DomainName}
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::sit.${DomainName}/*
            Principal: "*"
            Condition:
              IpAddress:
                aws:SourceIp: !Ref IpWhitelist

  baseRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront
        DNSName: !GetAtt CfDistribution.DomainName
      Comment: DNS name for FQDN.
      Name: !Sub www.${DomainName}.
      Type: A

  wwwRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront
        DNSName: !GetAtt CfDistribution.DomainName
      Comment: DNS name for wwww.
      Name: !Sub ${DomainName}.
      Type: A

  sitRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      AliasTarget:
        DNSName: !FindInMap [ RegionMap, !Ref "AWS::Region", endpoint ]
        HostedZoneId: !FindInMap [ RegionMap, !Ref "AWS::Region", hostedzoneid ]
      Comment: DNS name for sit s3 bucket.
      Name: !Sub sit.${DomainName}.
      Type: A

Outputs:
  TestWebsiteURL:
    Value: !Sub http://${sitRecordSet}
    Description: URL for test website hosted on S3
  LiveWebsiteURL:
    Value: !Sub https://${baseRecordSet}
    Description: URL for livewebsite hosted via CloudFront

